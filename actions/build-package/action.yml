# name: 'Build OpenWRT package'
# description: 'Builds an OpenWRT TollGate package'
# author: 'c03rad0r'

# branding:
#   color: orange
#   icon: box

# inputs:
#   architecture:
#     description: 'The target device id to build for'
#     required: true
#   openwrt_version:
#     description: 'OpenWRT version'
#     default: '23.05.3'
#   package_version:
#     description: 'TollGate OS version'
#     default: 'v0.0.0'
#   release_channel:
#     description: 'TollGate OS release channel (stable, dev, beta, etc)'
#     default: 'dev'
#   nostr_secret_key:
#     description: 'Nostr secret key'
#     required: true
#   nostr_public_key:
#     description: 'Nostr public key'
#     required: true
#   nostr_relays:
#     description: 'Comma-separated list of Nostr relays'
#     default: 'wss://relay.damus.io,wss://nos.lol,wss://nostr.mom'
#   nsecbech:
#     description: 'Nostr secret key for Blossom in bech32 format'
#     required: true
#   nsec:
#     description: 'Nostr secret key for event signing'
#     required: true

# outputs:
#   firmware_path:
#     description: 'Path to the built firmware file'
#     value: ${{ steps.build-os.outputs.firmware_path }}
#   firmware_name:
#     description: 'Name of the built firmware file'
#     value: ${{ steps.build-os.outputs.firmware_name }}

# runs:
#   using: "composite"
#   steps:
#     - name: Set environment variables
#       shell: bash
#       run: |
#         echo "PACKAGE_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
        
#     # Note: Composite actions can't run containers directly, so this must be handled in the workflow file
#     # The steps below must be run in an environment with the appropriate container
#     - uses: actions/checkout@v4
#       shell: bash
#       with:
#         path: ${{ env.PACKAGE_NAME }}/
#         fetch-depth: 0

#     - name: Move sources to sdk folder
#       shell: bash
#       run: |
#         mv ${{ env.PACKAGE_NAME }} /builder/package/${{ env.PACKAGE_NAME }}

#     - name: Install Golang
#       shell: bash
#       run: |
#         # Add golang-backports repository
#         echo "deb https://deb.debian.org/debian bookworm-backports main" > /etc/apt/sources.list.d/backports.list
#         apt-get update
#         # Install Go from backports
#         apt-get install -y -t bookworm-backports golang-go

#     - name: Configure SDK
#       shell: bash
#       run: |
#         cd /builder
#         # Generate default configuration
#         make defconfig
#         # Update configuration for our needs
#         echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=y" >> .config

#     - name: Compile Package
#       shell: bash
#       run: |
#         cd /builder

#         env GOARCH=${{ inputs.architecture }}
#         env PACKAGE_VERSION=${PACKAGE_VERSION}

#         # Only set GOMIPS for MIPS architectures (https://stackoverflow.com/q/55154143)
#         if [[ "${GOARCH,,}" == "mips" || "${GOARCH,,}" == "mipsle" ]]; then
#           env GOMIPS=softfloat
#         fi

#         make -j$(nproc) V=sc package/${{ env.PACKAGE_NAME }}/compile \
#         ${{ env.DEBUG == 'true' && 'V=sc' || '' }}

#     - name: List output package(s)
#       shell: bash
#       run: |
#         echo "Listing all .ipk files in /builder/bin/packages:"
#         find /builder/bin/packages -name "*.ipk" -type f
#         PACKAGE_PATH=$(find /builder/bin/packages -name "*.ipk" -type f | head -n1)
#         if [ -z "$PACKAGE_PATH" ]; then
#           echo "❌ No .ipk package found in /builder/bin/packages"
#           exit 1
#         fi
#         echo "✅ Found package at: $PACKAGE_PATH"
#         # Extract model from filename for later use
#         FILENAME=$(basename "$PACKAGE_PATH")
#         echo "PACKAGE_FILENAME=$FILENAME" >> $GITHUB_ENV
#         # Copy file to a location GitHub can access
#         mkdir -p /github/workspace/artifacts
#         cp "$PACKAGE_PATH" "/github/workspace/artifacts/$FILENAME"

#     - name: GitHub Artifact upload
#       uses: actions/upload-artifact@v4
#       with:
#         name: package-${{ env.PACKAGE_NAME }}
#         path: /github/workspace/artifacts/${{ env.PACKAGE_FILENAME }}
#         retention-days: 5

#     # Note: The "publish-metadata" job needs to be moved to a separate workflow file
#     # as composite actions cannot have multiple jobs
#   #   runs-on: ubuntu-latest
#   #   strategy:
#   #     matrix:
#   #       arch: [amd64, arm_cortex-a7, arm64_cortex-a53, mipsel_24kc, mips_24kc]

#   #   steps:
#   #     - name: Download artifact
#   #       uses: actions/download-artifact@v4
#   #       with:
#   #         name: ${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
#   #         path: ./artifacts

#   #     - name: Prepare package metadata
#   #       id: package_info
#   #       run: |
#   #         PACKAGE_PATH=$(find ./artifacts -name "*.ipk" -type f | head -n1)
#   #         FILENAME=$(basename "$PACKAGE_PATH")
#   #         # Extract model from filename
#   #         if [[ $FILENAME =~ _aarch64_cortex-a53 ]]; then
#   #           MODEL="aarch64_cortex-a53"
#   #         else
#   #           MODEL="generic"
#   #         fi
#   #         # Calculate file size
#   #         FILE_SIZE=$(stat -c%s "$PACKAGE_PATH")
#   #         echo "PACKAGE_PATH=$PACKAGE_PATH" >> $GITHUB_ENV
#   #         echo "PACKAGE_SIZE=$FILE_SIZE" >> $GITHUB_ENV
#   #         echo "MODEL=${{ matrix.arch }}" >> $GITHUB_ENV
#   #         echo "PACKAGE_FILENAME=${{ env.PACKAGE_NAME }}-${{ matrix.arch }}.ipk" >> $GITHUB_ENV

#   #     - name: Set Package Version
#   #       run: |
#   #         # Extract version from PACKAGE_PATH
#   #         PACKAGE_VERSION=$(echo "${{ env.PACKAGE_PATH }}" | sed -E 's/.*_([0-9.]+\+[0-9a-f]+)_.*\.ipk/\1/')
#   #         echo "PKG_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
#   #         echo "Set version to $PACKAGE_VERSION"

#   #     - name: Blossom Artifact upload
#   #       id: blossom_upload
#   #       uses: Origami74/upload-blossom-action@improve-io
#   #       with:
#   #         host: "https://blossom.swissdash.site"
#   #         filePath: ${{ env.PACKAGE_PATH }}

#   #     - name: Process Blossom response and extract hash
#   #       run: |
#   #         echo "Upload outputs:"
#   #         echo "  URL: ${{ steps.blossom_upload.outputs.url }}"
#   #         echo "  Hash: ${{ steps.blossom_upload.outputs.hash }}"
#   #         echo "  Size: ${{ env.PACKAGE_SIZE }} bytes"
#   #         # Extract hash from URL
#   #         URL="${{ steps.blossom_upload.outputs.url }}"
#   #         # Use basename to extract filename from URL
#   #         FILENAME=$(basename "$URL")
#   #         # Remove the file extension to get the hash
#   #         HASH="${FILENAME%.ipk}"
#   #         echo "Extracted hash from URL: $HASH"
#   #         # Store values in environment variables
#   #         echo "PACKAGE_URL=$URL" >> $GITHUB_ENV
#   #         echo "PACKAGE_HASH=$HASH" >> $GITHUB_ENV
#   #         # Verify hash was extracted successfully
#   #         if [ -z "$HASH" ]; then
#   #           echo "❌ ERROR: Failed to extract hash from URL"
#   #           exit 1
#   #         fi
#   #         # Verify hash is a valid hex string (64 characters for SHA-256)
#   #         if ! [[ $HASH =~ ^[0-9a-f]{64}$ ]]; then
#   #           echo "❌ ERROR: Extracted hash doesn't appear to be a valid SHA-256 hash"
#   #           exit 1
#   #         fi
#   #         echo "✅ Successfully extracted hash: $HASH"

#   #     - name: Extract Short Module Name
#   #       run: |
#   #         # Extract the basic part from tollgate-module-basic-go
#   #         if [[ "${{ env.PACKAGE_NAME }}" =~ tollgate-module-(.+)-go ]]; then
#   #           SHORT_MODULE="${BASH_REMATCH[1]}"
#   #         else
#   #           SHORT_MODULE="$(echo "${{ env.PACKAGE_NAME }}" | sed 's/tollgate-module-//g' | sed 's/-go//g')"
#   #         fi
#   #         echo "SHORT_MODULE=$SHORT_MODULE" >> $GITHUB_ENV
#   #         # Create a standardized filename for the package
#   #         PACKAGE_SHORT_FILENAME="${SHORT_MODULE}-${MODEL}.ipk"
#   #         echo "PACKAGE_SHORT_FILENAME=$PACKAGE_SHORT_FILENAME" >> $GITHUB_ENV
#   #         # Create a simplified content format
#   #         echo "PACKAGE_CONTENT=TollGate Module Package: ${SHORT_MODULE}" >> $GITHUB_ENV
#   #         # Set BRANCH_NAME environment variable
#   #         BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | sed 's/refs\/pull\///g')
#   #         echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

#   #     - name: Publish Package NIP-94 Metadata
#   #       id: publish_package
#   #       uses: OpenTollGate/nostr-publish-file-metadata-action@v0.1.0
#   #       with:
#   #         relays: >-
#   #           wss://relay.damus.io,
#   #           wss://nos.lol,
#   #           wss://nostr.mom/
#   #         url: ${{ env.PACKAGE_URL }}
#   #         mimeType: application/octet-stream
#   #         fileHash: ${{ env.PACKAGE_HASH }}
#   #         originalHash: ${{ env.PACKAGE_HASH }}
#   #         filename: "${{ env.PACKAGE_SHORT_FILENAME }}"
#   #         content: "${{ env.PACKAGE_CONTENT }}"
#   #         nsec: ${{ secrets.NSEC_HEX }}
#   #         size: ${{ env.PACKAGE_SIZE }}
#   #         customTags: |
#   #           architecture=${{ matrix.arch }}
#   #           version=${{ needs.determine-versioning.outputs.package_version }}
#   #           release_channel=${{ needs.determine-versioning.outputs.release_channel }}
#   #           package_name=$PACKAGE_NAME

#   #     - name: Verify Package NIP-94 Event
#   #       id: verify_package
#   #       # Use environment variable instead of step output
#   #       if: ${{ steps.publish_package.outputs.eventId }} != ''
#   #       uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@main
#   #       with:
#   #         eventId: ${{ steps.publish_package.outputs.eventId }}
#   #         relays: >-
#   #           wss://relay.damus.io,
#   #           wss://nos.lol,
#   #           wss://nostr.mom/
#   #           wss://relay.tollgate.me/

#   #     - name: Check Package Publication
#   #       # Only run this step if the verification ran and failed
#   #       if: steps.verify_package.outcome == 'failure'
#   #       run: |
#   #         echo "❌ Failed to verify package publication on relays"
#   #         exit 1

#   #     - name: Upload Artifact
#   #       uses: actions/upload-artifact@v4
#   #       with:
#   #         name: ${{ env.PACKAGE_NAME }}-${{ matrix.architecture }}
#   #         path: /github/workspace/artifacts/*.ipk
#   #         retention-days: 5

      
  
  
  
  
  # steps:
  #   - name: Initialize
  #     shell: bash
  #     run: |

  #       builddir=/tmp/tollgate-os-build
  #       mkdir $builddir

  #       echo "BUILDDIR=$builddir" >> $GITHUB_ENV
        
   
  #  # Example extraction source: https://downloads.openwrt.org/releases/24.10.1/.overview.json
  #   - name: Get Target details by device_id
  #     shell: bash
  #     run: |
  #       echo "ℹ️ Fetching target based on device id"
  #       all_targets=$( curl -s https://downloads.openwrt.org/releases/${{ inputs.openwrt_version }}/.overview.json )
      
  #       # Extract target from the correct path in the JSON structure
  #       current_target=$( echo "$all_targets" | jq -r --arg device "${{ inputs.device_id }}" '.profiles[] | select(.id == $device) | .target' )
        
  #       # Check if target was found
  #       if [ -z "$current_target" ] || [ "$current_target" = "null" ]; then
  #         echo "::error::Device ID '${{ inputs.device_id }}' not found in the OpenWrt overview file"
  #         exit 1
  #       fi
        
  #       echo "ℹ️ Current device: ${{ inputs.device_id }}"
  #       echo "ℹ️ Current target: $current_target (for device)"

  #       echo "CURRENT_TARGET=$current_target" >> $GITHUB_ENV


  #   # Example extraction source: https://downloads.openwrt.org/releases/24.10.1/targets/mediatek/filogic/profiles.json
  #   - name: Get architecture details by target
  #     shell: bash
  #     run: |
  #       echo "ℹ️ Fetching architecture based on discovered target"
  #       target_profiles=$( curl -s https://downloads.openwrt.org/releases/${{ inputs.openwrt_version }}/targets/${{ env.CURRENT_TARGET }}/profiles.json )
      
  #       # Exctract all relevant info for our OS build
  #       architecture=$( echo "$target_profiles" | jq -r '.arch_packages' )
  #       default_packages=$( echo "$target_profiles" | jq -r '.default_packages | map(tostring) | join(" ")')
  #       device_packages=$( echo "$target_profiles" | jq -r --arg device "${{ inputs.device_id }}" '.profiles.[$device].device_packages | map(tostring) | join(" ")' )
  #       supported_devices=$( echo "$target_profiles" | jq -r --arg device "${{ inputs.device_id }}" '.profiles.[$device].supported_devices | map(tostring) | join(" ")' )


  #       echo "ℹ️ Current architecture: $architecture"
  #       echo "ℹ️ Current default_packages: $default_packages"
  #       echo "ℹ️ Current device_packages: $device_packages"
  #       echo "ℹ️ Current supported_devices: $supported_devices"


  #       echo "OS_ARCHITECTURE=$architecture" >> $GITHUB_ENV
  #       echo "OS_DEFAULT_PACKAGES=$default_packages" >> $GITHUB_ENV
  #       echo "OS_DEVICE_PACKAGES=$device_packages" >> $GITHUB_ENV
  #       echo "OS_SUPPORTED_DEVICES=$supported_devices" >> $GITHUB_ENV

  #   - name: Select correct ImageBuilder for this target
  #     shell: bash
  #     run: |
  #       current_target_with_dash=$(echo "${{ env.CURRENT_TARGET }}" | tr '/' '-')

  #       imagebuilder_name="openwrt-imagebuilder-${{ inputs.openwrt_version }}-${current_target_with_dash}.Linux-x86_64"
  #       download_url="https://downloads.openwrt.org/releases/${{ inputs.openwrt_version }}/targets/${{ env.CURRENT_TARGET }}/${imagebuilder_name}.tar.xz"
        
  #       # If not present, fall back to .tar.zst extension
  #       if ! curl --output /dev/null --silent --head --fail "$download_url"; then
  #         download_url=$(echo "${download_url}" | sed 's/\.tar\.xz$/.tar.zst/')
  #         echo "⚠️ Using Image Builder fallback url"
  #       fi

  #       echo $imagebuilder_name
  #       echo $download_url

  #       echo "IMAGEBUILDER_NAME=$imagebuilder_name" >> $GITHUB_ENV
  #       echo "IMAGEBUILDER_DOWNLOAD_URL=$download_url" >> $GITHUB_ENV

    
  #   - name: Cache ImageBuilder
  #     id: cache-imagebuilder
  #     uses: actions/cache@v4
  #     with:
  #       path: ${{ env.BUILDDIR }}
  #       key: ${{ runner.os }}-imagebuilder-${{ env.IMAGEBUILDER_DOWNLOAD_URL }}
      
  #   - name: Download and Extract ImageBuilder
  #     if: steps.cache-imagebuilder.outputs.cache-hit != 'true'
  #     shell: bash
  #     run: |
  #       cd ${{ env.BUILDDIR }}
            
  #       curl -L -C - -O "${{ env.IMAGEBUILDER_DOWNLOAD_URL }}"
 
  #       downloaded_url=${{ env.IMAGEBUILDER_DOWNLOAD_URL }}
  #       downloaded_filename="${downloaded_url##*/}"
 
  #       if [[ "$downloaded_filename" == *.tar.zst ]]; then
  #         tar --zstd -xf "$downloaded_filename"
  #       else
  #           tar xfJ "$downloaded_filename"
  #       fi

  #   - name: Prepare for copy Custom Files and Packages to OS
  #     shell: bash
  #     env:
  #       NOSTR_SECRET_KEY: ${{ inputs.nostr_secret_key }}
  #       NOSTR_PUBLIC_KEY: ${{ inputs.nostr_public_key }}
  #       NOSTR_RELAYS: ${{ inputs.nostr_relays }}
  #     run: |
  #       mkdir -p ${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}/files
  #       if [ -d "${{ inputs.os_files_path }}" ]; then
  #         cp -r ${{ inputs.os_files_path }}/* ${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}/files/
  #       fi

  #       packages_dir="${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}/packages/local"
  #       mkdir -p "${packages_dir}"
  #       echo "PACKAGES_DIR=$packages_dir" >> $GITHUB_ENV

  #   - name: Download TollGate Packages from release.json
  #     shell: bash
  #     run: |
  #       # Create + populate packages directory if it doesn't exist
  #       touch "${{ env.PACKAGES_DIR }}/Packages" # prevents failures if no packages are downloaded
        
  #       echo "🔍 Looking for packages for architecture: ${{ env.OS_ARCHITECTURE }}"
        
  #       # Example source file: https://github.com/OpenTollGate/tollgate-os/blob/main/files/etc/tollgate/release.json
  #       tollgate_packages=$(jq -r '.modules' files/etc/tollgate/release.json)
  #       tollgate_packages_length=$(echo "${tollgate_packages}" | jq 'length')
        
  #       echo "🔍 Found $tollgate_packages_length TollGate package(s)."
        
  #       for ((i=0; i<$tollgate_packages_length; i++)); do
  #         tollgate_package_name=$(echo $tollgate_packages | jq -r --arg i "${i}" '.[$i | tonumber].name')
  #         tollgate_package_url=$(echo $tollgate_packages | jq -r --arg arch "${{ env.OS_ARCHITECTURE }}" --arg i "${i}" '.[$i | tonumber].versions[0].architectures[$arch].url')

  #         echo "📦 Downloading tollgate package: $tollgate_package_name from $tollgate_package_url"

  #         if curl -L -f --connect-timeout 30 --max-time 120 --retry 3 --retry-delay 5 -o "${{ env.PACKAGES_DIR }}/${tollgate_package_name}.ipk" "${tollgate_package_url}"; then
  #             echo "✅ Successfully downloaded ${tollgate_package_name}"
  #             tollgate_custom_packages="${tollgate_custom_packages} ${tollgate_package_name} "
  #           else
  #             echo "❌ Error: Failed to download ${tollgate_package_name} after 3 attempts"
  #             exit 1;
  #           fi
  #       done
        
  #       # List the downloaded packages
  #       echo "📋 Downloaded packages in ${{ env.PACKAGES_DIR }}:"
  #       ls -la "${{ env.PACKAGES_DIR }}"

  #       echo "ℹ️ TollGate custom packages added: $tollgate_custom_packages"
  #       echo "TOLLGATE_CUSTOM_PACKAGES=$tollgate_custom_packages" >> $GITHUB_ENV

  #   - name: Generate Package Index
  #     shell: bash
  #     run: |
  #       cd ${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}
  #       sudo bash -c 'mkhash() { if [ "$1" = "sha256" ]; then sha256sum "$2" | cut -d" " -f1; else sha256sum "$1" | cut -d" " -f1; fi; }; \
  #       export -f mkhash; \
  #       export MKHASH=mkhash; \
  #       ./scripts/ipkg-make-index.sh packages/local > packages/local/Packages && \
  #       gzip -9c packages/local/Packages > packages/local/Packages.gz'

  #   - name: Build Firmware with All Packages
  #     shell: bash
  #     id: build-os
  #     run: |
  #       combined_packages="${{ env.TOLLGATE_CUSTOM_PACKAGES }} ${{ env.OS_DEFAULT_PACKAGES }} ${{ env.OS_DEVICE_PACKAGES }}"
  #       combined_packages_normalized=$(echo "$combined_packages" | tr -s ' ')
  #       echo "ℹ️ Building TollGate OS with the following packages: ${combined_packages_normalized} (normalized)"

  #       cd ${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}
        
  #       # Original command
  #       sudo make -j$(nproc) image V=s \
  #         PROFILE="${{ inputs.device_id }}" \
  #         PACKAGES="${combined_packages_normalized}" \
  #         FILES="${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}/files"
        
  #       # Check if build succeeded
  #       tollgate_os_firmware_path=$(find ${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}/bin/targets/${PLATFORM}/${TYPE}/ -name "*sysupgrade.bin" -type f | head -1)
  #       if find ${{ env.BUILDDIR }}/${{ env.IMAGEBUILDER_NAME }}/bin/targets/${PLATFORM}/${TYPE}/ -name "*sysupgrade.bin" -type f | grep -q .; then
  #         echo "✅ TollGate OS Build succeeded!"
  #         echo "ℹ️ TollGate OS files can be found here: $tollgate_os_firmware_path"
  #       else
  #         echo "❌ Build failed"
  #         exit 1
  #       fi

  #       echo "firmware_path=${tollgate_os_firmware_path}" >> $GITHUB_OUTPUT
  #       echo "firmware_name=$(basename ${tollgate_os_firmware_path})" >> $GITHUB_OUTPUT

  #       echo "FIRMWARE_SIZE=$(stat -c%s "$FIRMWARE_PATH")" >> $GITHUB_ENV
  #       echo "TOLLGATE_OS_FIRMWARE_PATH=$tollgate_os_firmware_path" >> $GITHUB_ENV

  #   - name: Upload Firmware to Blossom
  #     id: upload_firmware
  #     uses: c03rad0r/cli-blossom-uploader-go@main
  #     with:
  #       host: "https://blossom.swissdash.site"
  #       filePath: ${{ env.TOLLGATE_OS_FIRMWARE_PATH }}
  #       nostrPrivateKey: ${{ inputs.NSECBECH }}

  #   - name: Publish Firmware NIP-94 Metadata
  #     id: publish_firmware
  #     uses: OpenTollGate/nostr-publish-file-metadata-action@v0.1.0
  #     with:
  #       relays: ${{ inputs.nostr_relays }}
  #       url: ${{ steps.upload_firmware.outputs.url }}
  #       mimeType: "application/octet-stream"
  #       fileHash: ${{ steps.upload_firmware.outputs.hash }}
  #       originalHash: ${{ env.FIRMWARE_HASH }}
  #       filename: ${{ steps.find-firmware.outputs.firmware_name }}
  #       content: "TollGate OS Firmware for ${{ inputs.device_id }}"
  #       nsec: ${{ inputs.nsec }}
  #       size: ${{ env.FIRMWARE_SIZE }}
  #       customTags: |
  #           architecture=${{ env.OS_ARCHITECTURE }}
  #           device_id=${{ inputs.device_id }}
  #           supported_devices=${{ env.OS_SUPPORTED_DEVICES }}
  #           openwrt_version=${{ inputs.openwrt_version }}
  #           tollgate_os_version=${{ inputs.tollgate_os_version }}
  #           release_channel=${{ inputs.release_channel }}

  #   - name: Verify Firmware Publication
  #     id: verify_firmware
  #     uses: OpenTollGate/nostr-publish-file-metadata-action/python/verify@v0.1.0
  #     with:
  #       eventId: ${{ steps.publish_firmware.outputs.eventId }}
  #       relays: ${{ inputs.nostr_relays }}