#!/bin/sh
# TollGate first-boot configuration

# Enable or disable logging (set to 0 to disable)
ENABLE_LOGGING=1
LOGFILE="/tmp/tollgate-setup.log"

# Helper function to safely set UCI values with error handling
uci_safe_set() {
	local config="$1"
	local section="$2"
	local option="$3"
	local value="$4"

	# Check if the config exists
	if [ ! -f "/etc/config/$config" ]; then
		echo "Creating config: $config"
		touch "/etc/config/$config"
	fi

	# Check if the section exists
	if ! uci -q get "$config.$section" >/dev/null 2>&1; then
		# Section doesn't exist, try to create it
		if [[ "$section" == *"@"* ]]; then
			# For array sections like @dnsmasq[0], we need special handling
			# Extract the section type
			section_type=$(echo "$section" | cut -d'@' -f2 | cut -d'[' -f1)
			uci add "$config" "$section_type" >/dev/null 2>&1
		else
			# For named sections
			uci set "$config.$section=" >/dev/null 2>&1
		fi
	fi

	# Now set the option safely
	uci set "$config.$section.$option=$value" >/dev/null 2>&1
}

# Logging function
log_message() {
	if [ "$ENABLE_LOGGING" -eq 1 ]; then
		echo "$(date "+%Y-%m-%d %H:%M:%S") - $1" >>"$LOGFILE"
	fi
}

# Initialize log file if logging is enabled
if [ "$ENABLE_LOGGING" -eq 1 ]; then
	echo "TollGate Setup Log - Started at $(date)" >"$LOGFILE"
	log_message "Starting TollGate configuration script"
fi

# Safe delete function
uci_safe_delete() {
	if uci -q get "$1" >/dev/null 2>&1; then
		uci -q delete "$1"
	fi
}

# Safe add_list function
uci_safe_add_list() {
	local path="$1"
	local value="$2"

	# Check if config and section exist
	local config=$(echo "$path" | cut -d. -f1)
	local section=$(echo "$path" | cut -d. -f2)

	if [ ! -f "/etc/config/$config" ]; then
		echo "Creating config: $config"
		touch "/etc/config/$config"
	fi

	if ! uci -q get "$config.$section" >/dev/null 2>&1; then
		# Create section
		if [[ "$section" == *"@"* ]]; then
			section_type=$(echo "$section" | cut -d'@' -f2 | cut -d'[' -f1)
			uci add "$config" "$section_type" >/dev/null 2>&1
		else
			uci set "$config.$section=" >/dev/null 2>&1
		fi
	fi

	uci add_list "$path=$value" >/dev/null 2>&1
}

# 1. Firewall configuration
log_message "Configuring firewall rules"
if ! uci -q get firewall.tollgate_rules >/dev/null 2>&1; then
	uci add firewall include >/dev/null 2>&1
	uci_safe_set firewall @include[-1] path '/etc/config/firewall-tollgate'
	uci rename firewall.@include[-1]='tollgate_rules' >/dev/null 2>&1
	uci commit firewall
	log_message "Added firewall-tollgate include section"
else
	log_message "Firewall tollgate_rules already exists"
fi

# 2. Configure uhttpd listener ports and settings
log_message "Configuring uhttpd settings"

# Ensure uhttpd config exists
if [ ! -f "/etc/config/uhttpd" ]; then
	touch "/etc/config/uhttpd"
	uci add uhttpd uhttpd >/dev/null 2>&1
	uci rename uhttpd.@uhttpd[-1]='main' >/dev/null 2>&1
fi

# Set HTTP listeners
uci_safe_delete uhttpd.main.listen_http
uci_safe_add_list uhttpd.main.listen_http '0.0.0.0:8080'
uci_safe_add_list uhttpd.main.listen_http '[::]:8080'

# Set HTTPS listeners
uci_safe_delete uhttpd.main.listen_https
uci_safe_add_list uhttpd.main.listen_https '0.0.0.0:443'
uci_safe_add_list uhttpd.main.listen_https '[::]:443'

# Set other important settings
uci_safe_set uhttpd main redirect_https '0'
uci_safe_set uhttpd main home '/www'
uci_safe_set uhttpd main rfc1918_filter '1'
uci_safe_set uhttpd main max_requests '3'
uci_safe_set uhttpd main max_connections '100'
uci_safe_set uhttpd main script_timeout '60'
uci_safe_set uhttpd main network_timeout '30'
uci_safe_set uhttpd main http_keepalive '20'
uci_safe_set uhttpd main tcp_keepalive '1'

# Commit changes
uci commit uhttpd
log_message "Updated uhttpd configuration"

# 3. Configure DNS settings
log_message "Configuring DNS settings"
current_dns=$(uci -q get network.lan.dns)
if [ "$current_dns" = "127.0.0.1" ] || [ "$current_dns" = "::1" ] || [ -z "$current_dns" ]; then
	# Only change DNS if it's set to localhost or not set
	uci_safe_delete network.lan.dns
	uci_safe_add_list network.lan.dns '1.1.1.1' # CloudFlare primary DNS
	uci_safe_add_list network.lan.dns '1.0.0.1' # CloudFlare secondary DNS
	log_message "Set DNS servers to Cloudflare (1.1.1.1, 1.0.0.1)"
else
	log_message "Keeping existing DNS configuration: $current_dns"
fi
uci_safe_set network lan domain 'lan'

# Configure dnsmasq
log_message "Configuring dnsmasq"
uci_safe_set dhcp @dnsmasq[0] domainneeded '1'
uci_safe_set dhcp @dnsmasq[0] localise_queries '1'
uci_safe_set dhcp @dnsmasq[0] rebind_protection '1'
uci_safe_set dhcp @dnsmasq[0] local '/lan/'
uci_safe_set dhcp @dnsmasq[0] domain 'lan'
uci_safe_set dhcp @dnsmasq[0] expandhosts '1'
uci commit network
uci commit dhcp
log_message "dnsmasq configuration completed"

# 4. Configure TollGate WiFi networks (AP mode)
log_message "Configuring TollGate WiFi networks (AP mode)"
# Find a suitable existing TollGate AP to reuse its SSID
SSID_BASE=""
for iface in $(uci -q show wireless | grep 'wifi-iface' | cut -d'.' -f2 | cut -d'=' -f1); do
    ssid=$(uci -q get wireless."$iface".ssid)
    mode=$(uci -q get wireless."$iface".mode)
    network=$(uci -q get wireless."$iface".network)
    encryption=$(uci -q get wireless."$iface".encryption)

    if [[ "$ssid" == TollGate-* ]] && [ "$mode" = "ap" ] && [ "$network" = "lan" ] && [ "$encryption" = "none" ]; then
        SSID_BASE="$ssid"
        log_message "Found suitable existing TollGate SSID: $SSID_BASE from interface $iface. Re-using it."
        break
    fi
done

# If no suitable SSID was found, generate a new one
if [ -z "$SSID_BASE" ]; then
    RANDOM_SUFFIX=$(head /dev/urandom | tr -dc 'A-Z0-9' | head -c 4)
    SSID_BASE="TollGate-${RANDOM_SUFFIX}"
    log_message "No existing suitable TollGate SSID found. Generated new random SSID: $SSID_BASE"
fi

# Disable all existing AP interfaces that are not the ones we are about to configure
log_message "Disabling all existing AP interfaces that are not the target TollGate APs"
for iface in $(uci -q show wireless | grep 'wifi-iface' | cut -d'.' -f2 | cut -d'=' -f1); do
    if [ "$(uci -q get wireless."$iface".mode)" = "ap" ]; then
        # Check if it's one of our *newly created* tollgate_ap_radioX interfaces that we are about to explicitly configure
        # Or if it's an existing default_radioX interface that we want to disable
        # The logic is: if this interface is NOT named 'tollgate_ap_radioX' AND it's an AP, disable it.
        # This will catch default_radioX and any other rogue APs.
        if [[ ! "$iface" == tollgate_ap_radio* ]]; then
            uci_safe_set wireless "$iface" disabled '1'
            log_message "Disabled existing non-TollGate AP interface: $iface"
        fi
    fi
done

# Get all wifi-device sections (e.g., radio0, radio1, mt798111, mt798112)
# We use 'uci -q show wireless | grep "\.type='"' to get the section name
# e.g., wireless.mt798111=wifi-device
for device_section in $(uci -q show wireless | grep "\.type='" | cut -d'.' -f2 | cut -d'=' -f1); do
	log_message "Processing wifi-device: $device_section"

	# Check if the device is already disabled
	DEVICE_DISABLED=$(uci -q get wireless."$device_section".disabled)
	if [ "$DEVICE_DISABLED" = "1" ]; then
		log_message "Enabling wifi-device: $device_section"
		uci_safe_set wireless "$device_section" disabled '0'
	fi

	# Create a new wifi-iface for the TollGate AP on this device
	# Use a unique name for the new interface to avoid conflicts
	NEW_IFACE_NAME="tollgate_ap_${device_section}"

	# Check if this specific TollGate AP interface already exists
	if ! uci -q get wireless."$NEW_IFACE_NAME" >/dev/null 2>&1; then
		uci add wireless wifi-iface >/dev/null 2>&1
		uci rename wireless.@wifi-iface[-1]="$NEW_IFACE_NAME" >/dev/null 2>&1
		log_message "Created new wifi-iface section: $NEW_IFACE_NAME"
	else
		log_message "TollGate AP interface $NEW_IFACE_NAME already exists."
	fi

	# Configure the new TollGate AP interface
	uci_safe_set wireless "$NEW_IFACE_NAME" device "$device_section"
	uci_safe_set wireless "$NEW_IFACE_NAME" mode 'ap'
	uci_safe_set wireless "$NEW_IFACE_NAME" network 'lan'
	uci_safe_set wireless "$NEW_IFACE_NAME" ssid "${SSID_BASE}"
	uci_safe_set wireless "$NEW_IFACE_NAME" encryption 'none'
	uci_safe_set wireless "$NEW_IFACE_NAME" disabled '0'
	log_message "Configured $NEW_IFACE_NAME on device $device_section with SSID: ${SSID_BASE}"
done

# Commit wireless changes
uci commit wireless
log_message "Committed wireless configuration"

# 5. Configure NoDogSplash
log_message "Configuring NoDogSplash"
if ! uci -q get nodogsplash.@nodogsplash[0]; then
	# Create nodogsplash section if it doesn't exist
	uci add nodogsplash nodogsplash
	log_message "Created new nodogsplash configuration"
else
	log_message "NoDogSplash configuration already exists"
fi

# Set basic NoDogSplash configuration with matching gateway name
uci_safe_set nodogsplash @nodogsplash[0] enabled '1'
uci_safe_set nodogsplash @nodogsplash[0] gatewayname "${SSID_BASE} Portal"
uci_safe_set nodogsplash @nodogsplash[0] gatewayinterface 'br-lan'

# Ensure TollGate protocol port is allowed
uci add_list nodogsplash.@nodogsplash[0].users_to_router='allow tcp port 2121'
uci add_list nodogsplash.@nodogsplash[0].users_to_router='allow tcp port 8080'
uci commit nodogsplash
log_message "NoDogSplash configuration completed"

# 6. Add TollGate port to firewall (if not in firewall-tollgate)
log_message "Checking for TollGate protocol port in firewall rules"
if ! grep -q "port 2121" /etc/config/firewall-tollgate 2>/dev/null; then
	# Add rule directly to main firewall if not in tollgate-specific file
	uci add firewall rule
	uci_safe_set firewall @rule[-1] name 'Allow-TollGate-Protocol'
	uci_safe_set firewall @rule[-1] src 'wan'
	uci_safe_set firewall @rule[-1] proto 'tcp'
	uci_safe_set firewall @rule[-1] dest_port '2121'
	uci_safe_set firewall @rule[-1] target 'ACCEPT'
	uci commit firewall
	log_message "Added firewall rule for TollGate protocol port 2121"
else
	log_message "TollGate protocol port already in firewall rules"
fi

# 7. Add first-login-setup hook to profile if it doesn't exist
log_message "Checking for first-login-setup hook in profile"
if ! grep -q "first-login-setup" /etc/profile; then
	# Append the first-login-setup code to the end of profile
	cat >>/etc/profile <<'EOF'

# TollGate first login setup
if [ ! -f /etc/first_login_done ] && [ -t 0 ] && [ -t 1 ]; then
    /usr/local/bin/first-login-setup
fi
EOF
	log_message "Added first-login-setup hook to /etc/profile"
else
	log_message "first-login-setup hook already exists in profile"
fi

# 8. Enable modem interfaces if they exist
log_message "Checking for modem interfaces to enable"
for section in $(uci show network | cut -d. -f2); do
	if [[ "$section" == "modem_"* ]]; then
		if uci -q get "network.$section" >/dev/null 2>&1; then
			uci_safe_set network "$section" disabled '0'
			log_message "Enabled modem interface: $section"
		fi
	fi
done
uci commit network
log_message "Committed network configuration changes"

# Final log message
log_message "TollGate setup completed successfully"

# Ensure script exits successfully
exit 0
