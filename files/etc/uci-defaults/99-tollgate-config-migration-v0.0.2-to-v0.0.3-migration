#!/bin/sh

# TollGate configuration migration script from v0.0.2 to v0.0.3

CONFIG_DIR="/etc/tollgate"
CONFIG_FILE="$CONFIG_DIR/config.json"

# Function to create timestamped backup
create_backup() {
	TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
	cp "$1" "$1.backup.$TIMESTAMP"
}

# This migration is ONLY for upgrading from EXACTLY v0.0.2 to v0.0.3
# Fresh installs of v0.0.3+ should never run this script

# Check if configuration file exists
if [ ! -f "$CONFIG_FILE" ]; then
	echo "Configuration file '$CONFIG_FILE' doesn't exist. This is likely a fresh install - exiting."
	exit 0
fi

# Check if configuration file is empty
if [ ! -s "$CONFIG_FILE" ]; then
	echo "Configuration file '$CONFIG_FILE' is empty. This is likely a fresh install or an issue - exiting."
	exit 0
fi

# Validate JSON is not corrupted before proceeding with version check
if ! jq empty "$CONFIG_FILE" >/dev/null 2>&1; then
	echo "Configuration file '$CONFIG_FILE' is corrupted JSON. Cannot migrate safely - exiting."
	exit 0
fi

# CRITICAL: Only run if config_version is EXACTLY "v0.0.2"
CURRENT_VERSION=$(jq -r '.config_version // "none"' "$CONFIG_FILE" 2>/dev/null)
if [ "$CURRENT_VERSION" != "v0.0.2" ]; then
	echo "Configuration version is '$CURRENT_VERSION', not 'v0.0.2'. Migration not needed."
	exit 0
fi

# Validate this looks like a genuine v0.0.2 config (should have price_per_minute and it should not be null)
if ! jq -e '.price_per_minute | numbers' "$CONFIG_FILE" >/dev/null 2>&1; then
	echo "Configuration doesn't have price_per_minute field or it's not a number. This doesn't look like v0.0.2 - cannot migrate safely."
	exit 0
fi

# Create backups
create_backup "$CONFIG_FILE"

# Migrate config.json from v0.0.2 to v0.0.3 (atomic operation using temporary file)
echo "Starting migration from v0.0.2 to v0.0.3..."
jq --argjson stepsize 60000 --arg metric "milliseconds" '
    .config_version = "v0.0.3"
    | .step_size = $stepsize
    | .metric = $metric
    | . as $root
    | .accepted_mints |= map(
        if has("price_per_step") then
            .
        else
            . + {price_per_step: ($root.price_per_minute // 1), price_unit: "sat", purchase_min_steps: 0}
        end
    )
    | del(.price_per_minute)
' "$CONFIG_FILE.backup.$TIMESTAMP" >"$CONFIG_FILE.tmp"

# Verify the migrated config is valid JSON and has expected structure
if ! jq empty "$CONFIG_FILE.tmp" >/dev/null 2>&1; then
	echo "Error: Migration resulted in invalid JSON"
	rm -f "$CONFIG_FILE.tmp"
	mv "$CONFIG_FILE.backup.$TIMESTAMP" "$CONFIG_FILE"
	exit 1
fi

# Verify the migrated config has the expected version
MIGRATED_VERSION=$(jq -r '.config_version' "$CONFIG_FILE.tmp" 2>/dev/null)
if [ "$MIGRATED_VERSION" != "v0.0.3" ]; then
	echo "Error: Migration did not set correct version (got: $MIGRATED_VERSION)"
	rm -f "$CONFIG_FILE.tmp"
	mv "$CONFIG_FILE.backup.$TIMESTAMP" "$CONFIG_FILE"
	exit 1
fi

# Verify price_per_minute was removed
if jq -e '.price_per_minute' "$CONFIG_FILE.tmp" >/dev/null 2>&1; then
	echo "Error: Migration did not remove price_per_minute field"
	rm -f "$CONFIG_FILE.tmp"
	mv "$CONFIG_FILE.backup.$TIMESTAMP" "$CONFIG_FILE"
	exit 1
fi

# Atomically replace the original file
mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
if [ $? -eq 0 ]; then
	echo "Configuration migration from v0.0.2 to v0.0.3 completed successfully"
else
	echo "Error: Failed to replace configuration file"
	mv "$CONFIG_FILE.backup.$TIMESTAMP" "$CONFIG_FILE"
	exit 1
fi

exit 0
