#!/bin/sh

# TollGate configuration migration script from v0.0.2 to v0.0.3

CONFIG_DIR="/etc/tollgate"
CONFIG_FILE="$CONFIG_DIR/config.json"

# Function to create timestamped backup
create_backup() {
    TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
    cp "$1" "$1.backup.$TIMESTAMP"
}

# Check if migration is needed
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Configuration file doesn't exist. Exiting."
    exit 0
fi

# Check if already migrated to v0.0.3
if jq -e '.config_version == "v0.0.3"' "$CONFIG_FILE" > /dev/null 2>&1; then
    echo "Configuration is already v0.0.3 format. Exiting."
    exit 0
fi

# Check if configuration is v0.0.2 (the version we want to migrate from)
if ! jq -e '.config_version == "v0.0.2"' "$CONFIG_FILE" > /dev/null 2>&1; then
    echo "Configuration is not v0.0.2 format. Migration not needed."
    exit 0
fi

# Check if we have the old format with price_per_minute
if ! jq -e '.price_per_minute' "$CONFIG_FILE" > /dev/null 2>&1; then
    echo "Configuration doesn't have price_per_minute field. Cannot migrate."
    exit 0
fi

# Create backups
create_backup "$CONFIG_FILE"

# Migrate config.json from v0.0.2 to v0.0.3
jq --argjson stepsize 60000 --arg metric "milliseconds" '
    .config_version = "v0.0.3"
    | .step_size = $stepsize
    | .metric = $metric
    | . as $root
    | .accepted_mints |= map(
        if has("price_per_step") then
            .
        else
            . + {price_per_step: ($root.price_per_minute // 1), price_unit: "sat", purchase_min_steps: 0}
        end
    )
    | del(.price_per_minute)
' "$CONFIG_FILE.backup.$TIMESTAMP" > "$CONFIG_FILE"

# Verify migration success
if [ $? -eq 0 ]; then
    echo "Configuration migration from v0.0.2 to v0.0.3 completed successfully"
else
    echo "Error during configuration migration"
    # Restore backups on failure
    mv "$CONFIG_FILE.backup.$TIMESTAMP" "$CONFIG_FILE"
    exit 1
fi

exit 0