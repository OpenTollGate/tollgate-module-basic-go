#!/bin/sh
# This script migrates the config.json from v0.0.3 to v0.0.4.
# It creates an identities.json file and updates config.json to use identity references.

CONFIG_FILE="/etc/tollgate/config.json"
IDENTITIES_FILE="/etc/tollgate/identities.json"
BACKUP_DIR="/etc/tollgate/backups"
CURRENT_VERSION="v0.0.4"
PREVIOUS_VERSION="v0.0.3"

log() {
    echo "$(date +"%Y-%m-%d %H:%M:%S") $1" >> /var/log/tollgate_config_migration.log
}

# Ensure jq is installed
if ! command -v jq &> /dev/null; then
    log "jq not found. Please install jq to proceed with config migration."
    exit 1
fi

# 1. Check if config.json exists
if [ ! -f "$CONFIG_FILE" ]; then
    log "Config file $CONFIG_FILE does not exist. No migration needed."
    exit 0
fi

# 2. Check if config.json is empty
if [ ! -s "$CONFIG_FILE" ]; then
    log "Config file $CONFIG_FILE is empty. No migration needed."
    exit 0
fi

# 3. Validate JSON and get current version
CURRENT_CONFIG_VERSION=$(jq -r '.config_version // "v0.0.1"' "$CONFIG_FILE" 2>/dev/null)
if [ $? -ne 0 ]; then
    log "Config file $CONFIG_FILE is not valid JSON. Skipping migration."
    exit 0
fi

# 4. Check if migration is needed
if [ "$CURRENT_CONFIG_VERSION" = "$CURRENT_VERSION" ]; then
    log "Config file is already at version $CURRENT_VERSION. No migration needed."
    exit 0
fi

if [ "$CURRENT_CONFIG_VERSION" != "$PREVIOUS_VERSION" ]; then
    log "Config file version is $CURRENT_CONFIG_VERSION, not $PREVIOUS_VERSION. Skipping this migration."
    exit 0
fi

log "Starting migration from $PREVIOUS_VERSION to $CURRENT_VERSION for $CONFIG_FILE"

# 5. Create backup
mkdir -p "$BACKUP_DIR"
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
cp "$CONFIG_FILE" "$BACKUP_DIR/config.json.$PREVIOUS_VERSION.$TIMESTAMP.bak"
log "Backup of $CONFIG_FILE created at $BACKUP_DIR/config.json.$PREVIOUS_VERSION.$TIMESTAMP.bak"

# 6. Extract existing merchant and profit share data for identities.json
MERCHANT_NAME=$(jq -r '.merchant.name // "c03rad0r"' "$CONFIG_FILE")
MERCHANT_LNURL=$(jq -r '.merchant.lightning_address // "tollgate@minibits.cash"' "$CONFIG_FILE")

# Extract the private key from config.json
OPERATOR_PRIVKEY=$(jq -r '.tollgate_private_key // ""' "$CONFIG_FILE")
log "Extracted private key from config.json"

# Determine key format
if [ -n "$OPERATOR_PRIVKEY" ]; then
    # Keep the private key in its original format (assumed to be hex)
    OPERATOR_KEY="$OPERATOR_PRIVKEY"
    OPERATOR_KEY_FORMAT="hex_private"
    log "Using existing private key in hex format"
else
    log "No private key found in config.json"
    # Generate a random hex private key
    OPERATOR_KEY=$(openssl rand -hex 32)
    OPERATOR_KEY_FORMAT="hex_private"
    log "Generated new private key in hex format"
fi

# Default developer npub (public key only)
DEVELOPER_KEY="npub1zzt0d0s2f4lsanpd7nkjep5r79p7ljq7aw37eek64hf0ef6v0mxqgwljrv"
DEVELOPER_KEY_FORMAT="npub"
DEVELOPER_LNURL="tollgate@minibits.cash"

# Create identities.json
jq -n \
  --arg current_identity_version "v0.0.1" \
  --arg ok "$OPERATOR_KEY" \
  --arg okf "$OPERATOR_KEY_FORMAT" \
  --arg ml "$MERCHANT_LNURL" \
  --arg dk "$DEVELOPER_KEY" \
  --arg dkf "$DEVELOPER_KEY_FORMAT" \
  --arg dl "$DEVELOPER_LNURL" \
  '{
    "config_version": $current_identity_version,
    "identities": [
      {
        "name": "operator",
        "key": $ok,
        "key_format": $okf,
        "lightning_address": $ml
      },
      {
        "name": "developer",
        "key": $dk,
        "key_format": $dkf,
        "lightning_address": $dl
      }
    ]
  }' > "$IDENTITIES_FILE"
log "Created identities file at $IDENTITIES_FILE"

# 7. Update config.json
TMP_CONFIG=$(mktemp)
jq --arg current_version "$CURRENT_VERSION" \
   'del(.merchant.name, .merchant.lightning_address, .merchant.website) |
    .merchant.identity = "operator" |
    .profit_share[] |= del(.lightning_address) |
    .profit_share[0].identity = "operator" |
    .profit_share[1].identity = "developer" |
    .config_version = $current_version' "$CONFIG_FILE" > "$TMP_CONFIG" && mv "$TMP_CONFIG" "$CONFIG_FILE"

if [ $? -ne 0 ]; then
    log "Failed to update $CONFIG_FILE. Restoring from backup."
    cp "$BACKUP_DIR/config.json.$PREVIOUS_VERSION.$TIMESTAMP.bak" "$CONFIG_FILE"
    exit 1
fi

log "Successfully migrated $CONFIG_FILE to $CURRENT_VERSION"
log "Migration script finished."

exit 0