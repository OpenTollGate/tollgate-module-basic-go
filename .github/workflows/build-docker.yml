name: Build and Publish

on:
  push:

## Add global env vars for the whole workflow
env:
  PACKAGE_NAME: "tollgate-module-basic-go"

jobs:
  determine-versioning:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.determine-package-version.outputs.package_version }}
      release_channel: ${{ steps.determine-release-channel.outputs.release_channel }}
    steps:
      - id: commit-hash
        uses: prompt/actions-commit-hash@v3

      - name: Set package_version variable
        id: determine-package-version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # If this is a tag push, use the tag name
            echo "package_version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            # If this is a branch push, use branch-shortCommitHash format
            echo "package_version=${GITHUB_REF_NAME}-${{ steps.commit-hash.outputs.short }}" >> $GITHUB_OUTPUT
          fi
        
      - name: Set version variable
        id: determine-release-channel
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "release_channel=stable" >> $GITHUB_OUTPUT
          else
            echo "release_channel=dev" >> $GITHUB_OUTPUT
          fi

  build-package:
    needs: determine-versioning
    runs-on: ubuntu-latest
    container:
      image: openwrt/sdk:${{ matrix.sdk }}-24.10.1 # TODO: dynamic
      options: --user root
    strategy:
      matrix:
        include:
          # - architecture: amd64
          #   goarch: amd64
          #   sdk: x86-64
          # - architecture: arm_cortex-a7
          #   goarch: arm
          #   goarm: 7
          #   sdk: arm_cortex-a7
          - architecture: arm64_cortex-a53
            goarch: arm64
            sdk: mediatek-filogic
          # - architecture: mipsel_24kc
          #   goarch: mipsle
          #   gomips: softfloat
          #   sdk: mipsel_24kc
          # - architecture: mips_24kc
          #   goarch: mips
          #   gomips: softfloat
          #   sdk: mips_24kc
    
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.PACKAGE_NAME }}/
          fetch-depth: 0

      - name: Move sources to sdk folder
        run: |
          mv ${{ env.PACKAGE_NAME }} /builder/package/${{ env.PACKAGE_NAME }}

      - name: Install Golang
        run: |
          # Add golang-backports repository
          echo "deb https://deb.debian.org/debian bookworm-backports main" > /etc/apt/sources.list.d/backports.list
          apt-get update
          # Install Go from backports
          apt-get install -y -t bookworm-backports golang-go

      - name: Configure SDK
        run: |
          cd /builder
          # Generate default configuration
          make defconfig
          # Update configuration for our needs
          echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=y" >> .config

      - name: Compile Package
        run: |
          cd /builder

          env GOARCH=${{ matrix.GOARCH }}
          env PACKAGE_VERSION=${{ needs.determine-versioning.outputs.package_version }}

          # Only set GOMIPS for MIPS architectures (https://stackoverflow.com/q/55154143)
          if [[ "${{ matrix.GOARCH }}" == "mips" || "${{ matrix.GOARCH }}" == "mipsle" ]]; then
            env GOMIPS=softfloat
          fi

          make -j$(nproc) V=sc package/${{ env.PACKAGE_NAME }}/compile \
          ${{ env.DEBUG == 'true' && 'V=sc' || '' }}

      - name: List output package(s)
        run: |
          echo "Listing all .ipk files in /builder/bin/packages:"
          find /builder/bin/packages -name "*.ipk" -type f
          PACKAGE_PATH=$(find /builder/bin/packages -name "*.ipk" -type f | head -n1)
          if [ -z "$PACKAGE_PATH" ]; then
            echo "❌ No .ipk package found in /builder/bin/packages"
            exit 1
          fi
          echo "✅ Found package at: $PACKAGE_PATH"
          # Extract model from filename for later use
          FILENAME=$(basename "$PACKAGE_PATH")
          echo "PACKAGE_FILENAME=$FILENAME" >> $GITHUB_ENV
          # Copy file to a location GitHub can access
          mkdir -p /github/workspace/artifacts
          cp "$PACKAGE_PATH" "/github/workspace/artifacts/$FILENAME"

      - name: GitHub Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ env.PACKAGE_NAME }}
          path: /github/workspace/artifacts/${{ env.PACKAGE_FILENAME }}
          retention-days: 5

      - name: Trigger OS Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenTollGate/tollgate-os
          event-type: update-release-json